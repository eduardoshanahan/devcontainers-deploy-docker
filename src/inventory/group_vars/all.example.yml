---
# =============================================================================
# ENVIRONMENT-SPECIFIC CONFIGURATION
# =============================================================================
# This file contains environment-specific values that are referenced by features.yml
# Keep sensitive data here (not in git) and use the centralized system
# =============================================================================

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
vps_server_ip: "your-server-ip-or-hostname"
initial_deployment_user: "ubuntu"
initial_deployment_ssh_key: "~/.ssh/your-ssh-key"
containers_deployment_user: "docker_deployment"
containers_deployment_user_ssh_key: "~/.ssh/your-deployment-key"
containers_deployment_user_ssh_key_public: "/path/to/your/public/key.pub"

# SSH Configuration
ansible_ssh_common_args: "-o IdentitiesOnly=yes -o PreferredAuthentications=publickey"
ansible_python_interpreter: "/usr/bin/python3.10"

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# Security Updates Configuration
configure_security_updates_email: "your-email@gmail.com"
configure_security_updates_gmail_enabled: true
configure_security_updates_gmail_user: "your-gmail@gmail.com"
configure_security_updates_gmail_password: "your-app-password"
configure_security_updates_gmail_smtp_server: "smtp.gmail.com"
configure_security_updates_gmail_smtp_port: "465"
configure_security_updates_slack_webhook: ""
configure_security_updates_discord_webhook: ""

# Firewall Configuration
configure_firewall_logging_level: "medium"
configure_firewall_docker_networks:
  - 172.20.0.0/16  # Web applications network
  - 172.21.0.0/16  # Database network
  - 172.22.0.0/16  # Monitoring network
configure_firewall_container_ports: []  # Empty list - no ports open

# =============================================================================
# MONITORING CONFIGURATION
# =============================================================================
configure_monitoring_enabled: true
configure_monitoring_prometheus_enabled: false  # Disable Prometheus Node Exporter
configure_monitoring_alert_email: "your-email@example.com"
configure_monitoring_alert_webhook: ""

# =============================================================================
# CONTAINER SECURITY CONFIGURATION
# =============================================================================
configure_container_security_enabled: true
configure_container_security_trivy_enabled: true
configure_container_security_alerts_enabled: true
configure_container_security_alert_email: "your-email@example.com"
configure_container_security_auto_cleanup: false  # NEW: Auto-cleanup vulnerable images

# =============================================================================
# DOCKER NETWORK CONFIGURATION
# =============================================================================
# Default networks
configure_docker_networks_default_networks:
  - name: "test-to-delete-web-network"
    subnet: "172.20.0.0/16"
    driver: "bridge"
    description: "TEST NETWORK - Web applications and frontend services (DELETE AFTER TESTING)"
  - name: "test-db-network"
    subnet: "172.21.0.0/16"
    driver: "bridge"
    description: "TEST NETWORK - Databases and backend services (DELETE AFTER TESTING)"
  - name: "test-to-delete-monitoring-network"
    subnet: "172.22.0.0/16"
    driver: "bridge"
    description: "TEST NETWORK - Monitoring and logging services (DELETE AFTER TESTING)"

# Custom networks
configure_docker_networks_custom_networks:
  - name: "test-api-network"
    subnet: "172.23.0.0/16"
    driver: "bridge"
    description: "TEST NETWORK - API services network (DELETE AFTER TESTING)"
  - name: "test-cache-network"
    subnet: "172.24.0.0/16"
    driver: "bridge"
    description: "TEST NETWORK - Cache and session storage network (DELETE AFTER TESTING)"

# Network policies
deploy_docker_network_policies:
  web_services:
    - "nginx"
    - "apache"
    - "nodejs"
    - "react"
    - "vue"
  database_services:
    - "postgres"
    - "mysql"
    - "redis"
    - "mongodb"
  monitoring_services:
    - "prometheus"
    - "grafana"
    - "elasticsearch"
    - "kibana"

# Network removal (use with caution)
configure_docker_networks_remove_all: false

# =============================================================================
# REMOTE LOGGING CONFIGURATION
# =============================================================================
configure_remote_logging_enabled: true
configure_remote_logging_server: "your-logging-server-ip"
configure_remote_logging_protocol: "udp"
configure_remote_logging_port: 514
configure_remote_logging_retry_interval: 30
configure_remote_logging_max_retries: 3
configure_remote_logging_forward_all_logs: true
configure_remote_logging_forward_security_logs: true
configure_remote_logging_forward_system_logs: true
configure_remote_logging_forward_docker_logs: true

# =============================================================================
# LOG DOWNLOAD CONFIGURATION
# =============================================================================
configure_log_download_enabled: true
configure_log_download_auto_collect: true
configure_log_download_auto_cleanup: true
configure_log_download_retention_days: 7
configure_log_download_secure_only: true
configure_log_download_encrypt_exports: true
configure_log_download_cleanup_passwords: true
configure_log_download_require_auth: true
configure_log_download_allowed_ips: []

# =============================================================================
# DOCKER USER PERMISSIONS
# =============================================================================
docker_user_enhanced_permissions: true
docker_user_network_management: true
docker_user_system_monitoring: true

# =============================================================================
# DOCKER DEPLOYMENT CONFIGURATION
# =============================================================================
deploy_docker_security_enabled: true
deploy_docker_clean_slate: false  # Set to true to remove all Docker images/containers
deploy_docker_packages:
  - docker-ce
  - docker-ce-cli
  - containerd.io