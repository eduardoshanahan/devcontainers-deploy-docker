---
# Server Configuration
vps_server_ip: "your-server-ip-or-hostname"
initial_deployment_user: "ubuntu"
initial_deployment_ssh_key: "~/.ssh/your-ssh-key"
containers_deployment_user: "docker_deployment"
containers_deployment_user_ssh_key: "~/.ssh/your-deployment-key"
containers_deployment_user_ssh_key_public: "/path/to/your/public/key.pub"

# SSH Configuration
ansible_ssh_common_args: "-o IdentitiesOnly=yes -o PreferredAuthentications=publickey"
ansible_python_interpreter: "/usr/bin/python3.10"

# Security Updates Configuration (Environment-specific)
configure_security_updates_email: "your-email@gmail.com"
configure_security_updates_gmail_enabled: true
configure_security_updates_gmail_user: "your-gmail@gmail.com"
configure_security_updates_gmail_password: "your-app-password"
configure_security_updates_gmail_smtp_server: "smtp.gmail.com"
configure_security_updates_gmail_smtp_port: "465"
configure_security_updates_slack_webhook: ""
configure_security_updates_discord_webhook: ""

# Firewall Configuration
configure_firewall_docker_networks:
  - 172.20.0.0/16  # Web applications network
  - 172.21.0.0/16  # Database network
  - 172.22.0.0/16  # Monitoring network

configure_firewall_container_ports:
  - 8080  # Web application port
  - 3000  # Node.js application port
  - 9000  # Portainer port
  - 5432  # PostgreSQL port
  - 3306  # MySQL port

configure_firewall_logging_level: "medium"

# Docker Configuration
deploy_docker_network_configuration:
  default_networks:
    - name: "web-network"
      subnet: "172.20.0.0/16"
      driver: "bridge"
      description: "Network for web applications and frontend services"
    - name: "db-network"
      subnet: "172.21.0.0/16"
      driver: "bridge"
      description: "Network for databases and backend services"
    - name: "monitoring-network"
      subnet: "172.22.0.0/16"
      driver: "bridge"
      description: "Network for monitoring and logging services"
  
  network_isolation: true
  default_container_network: "web-network"
  
  network_security:
    enable_bridge_netfilter: true
    enable_ip_forwarding: true
    enable_network_isolation: true

# Docker Network Configuration (Environment-specific)
configure_docker_networks_default_networks:
  - name: "web-network"
    subnet: "172.20.0.0/16"
    driver: "bridge"
    description: "Network for web applications and frontend services"
  - name: "db-network"
    subnet: "172.21.0.0/16"
    driver: "bridge"
    description: "Network for databases and backend services"
  - name: "monitoring-network"
    subnet: "172.22.0.0/16"
    driver: "bridge"
    description: "Network for monitoring and logging services"

# Additional custom networks (optional)
configure_docker_networks_custom_networks:
  - name: "api-network"
    subnet: "172.23.0.0/16"
    driver: "bridge"
    description: "API services network"
  - name: "cache-network"
    subnet: "172.24.0.0/16"
    driver: "bridge"
    description: "Cache and session storage network"

# Network Policies
deploy_docker_network_policies:
  web_services:
    - "nginx"
    - "apache"
    - "nodejs"
    - "react"
    - "vue"
  
  database_services:
    - "postgres"
    - "mysql"
    - "redis"
    - "mongodb"
  
  monitoring_services:
    - "prometheus"
    - "grafana"
    - "elasticsearch"
    - "kibana"

# Monitoring Configuration (Environment-specific)
configure_monitoring_enabled: true
configure_monitoring_alert_email: "your-email@example.com"
configure_monitoring_alert_webhook: ""