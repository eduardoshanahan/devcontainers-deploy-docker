---
- name: Install fail2ban
  ansible.builtin.apt:
    name: fail2ban
    state: present
    update_cache: true
  become: true

- name: Create fail2ban configuration directory
  ansible.builtin.file:
    path: /etc/fail2ban
    state: directory
    mode: "0755"
  become: true

- name: Configure fail2ban main configuration
  ansible.builtin.template:
    src: jail.local.j2
    dest: /etc/fail2ban/jail.local
    owner: root
    group: root
    mode: "0644"
    backup: true
  become: true
  notify: Restart fail2ban

- name: Configure SSH jail
  ansible.builtin.template:
    src: sshd.local.j2
    dest: /etc/fail2ban/jail.d/sshd.local
    owner: root
    group: root
    mode: "0644"
    backup: true
  become: true
  notify: Restart fail2ban

- name: Check fail2ban service status
  ansible.builtin.service:
    name: fail2ban
    state: started
    enabled: true
  become: true

- name: Display fail2ban service status
  ansible.builtin.command: systemctl status fail2ban
  register: fail2ban_service_status
  changed_when: false
  failed_when: false
  become: true

- name: Debug fail2ban service status
  ansible.builtin.debug:
    msg: "{{ fail2ban_service_status.stdout_lines }}"

- name: Display fail2ban status (if available)
  ansible.builtin.command: fail2ban-client status
  register: fail2ban_status
  changed_when: false
  failed_when: false
  become: true

- name: Debug fail2ban status
  ansible.builtin.debug:
    msg: "{{ fail2ban_status.stdout_lines if fail2ban_status.rc == 0 else 'Fail2ban client not responding - check service status above' }}"

- name: Check for fail2ban timezone issues
  ansible.builtin.shell: |
    if grep -q "timezone issue" /var/log/fail2ban.log; then
      echo "timezone_issue_detected"
    else
      echo "no_timezone_issue"
    fi
  register: timezone_check
  changed_when: false
  become: true

- name: Reset fail2ban database if timezone issues detected
  become: true
  when: timezone_check.stdout == "timezone_issue_detected"
  notify: Restart fail2ban
  block:
    - name: Stop fail2ban service
      ansible.builtin.systemd:
        name: fail2ban
        state: stopped

    - name: Remove fail2ban database and logs
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/fail2ban/fail2ban.sqlite3
        - /var/log/fail2ban.log.1

    - name: Start fail2ban service
      ansible.builtin.systemd:
        name: fail2ban
        state: started

- name: Create enhanced fail2ban timezone fix script
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # Enhanced fail2ban fix script
      # Handles timezone issues and log position problems

      if grep -q "timezone issue" /var/log/fail2ban.log 2>/dev/null; then
        echo "Timezone issues detected, performing comprehensive reset..."
        systemctl stop fail2ban

        # Remove database and rotated logs to force full reprocessing
        rm -f /var/lib/fail2ban/fail2ban.sqlite3
        rm -f /var/log/fail2ban.log.1

        systemctl start fail2ban
        logger "Fail2ban: Comprehensive reset due to timezone issues"
        echo "Fail2ban reset completed"
      else
        echo "No timezone issues detected"
      fi
    dest: /opt/security/fail2ban-timezone-fix.sh
    mode: "0755"
    owner: root
    group: root
  become: true

- name: Create fail2ban health check script
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # Enhanced fail2ban health check script
      # Detects multiple types of issues: timezone, log position, and processing problems

      # Check if service is running
      if ! systemctl is-active --quiet fail2ban; then
        echo "processing_issue_detected"
        exit 0
      fi

      # Get fail2ban status
      status_output=$(fail2ban-client status sshd 2>/dev/null || echo "")
      total_failed=$(echo "$status_output" | grep -i "total failed" | sed 's/.*: *//' | awk '{print $1}' || echo "0")

      # Count actual attempts in auth.log
      auth_attempts=$(grep -c "Failed password\|Invalid user\|authentication failure" /var/log/auth.log 2>/dev/null || echo "0")

      # Check for timezone issues in logs
      timezone_issues=$(grep -c "timezone issue" /var/log/fail2ban.log 2>/dev/null || echo "0")

      # Check log position - if fail2ban recently started but position is high, it's wrong
      recent_start=$(grep "Added logfile.*pos =" /var/log/fail2ban.log 2>/dev/null | tail -1)
      if [ -n "$recent_start" ]; then
        log_position=$(echo "$recent_start" | sed -n 's/.*pos = \([0-9]*\).*/\1/p' || echo "0")
        # If position is > 1000000 and we have many auth attempts, it's likely wrong
        if [ "$log_position" -gt "1000000" ] && [ "$auth_attempts" -gt "1000" ]; then
          echo "processing_issue_detected"
          exit 0
        fi
      fi

      # Main processing check: if fail2ban shows 0 but auth.log has many attempts
      if [ "$total_failed" -eq "0" ] && [ "$auth_attempts" -gt "100" ]; then
        echo "processing_issue_detected"
        exit 0
      fi

      # Check for timezone issues
      if [ "$timezone_issues" -gt "0" ]; then
        echo "processing_issue_detected"
        exit 0
      fi

      echo "no_processing_issue"
    dest: /opt/security/fail2ban-health-check.sh
    mode: "0755"
    owner: root
    group: root
  become: true

- name: Run fail2ban health check
  ansible.builtin.command: /opt/security/fail2ban-health-check.sh
  register: processing_check
  changed_when: false
  become: true

- name: Reset fail2ban if not processing attempts correctly
  become: true
  when: processing_check.stdout == "processing_issue_detected"
  block:
    - name: Stop fail2ban service
      ansible.builtin.systemd:
        name: fail2ban
        state: stopped

    - name: Remove fail2ban database and state files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/fail2ban/fail2ban.sqlite3
        - /var/lib/fail2ban/*.sqlite3
        - /var/log/fail2ban.log.1
        - /var/log/fail2ban.log.2

    - name: Log the reset action
      ansible.builtin.shell: |
        logger "Fail2ban: Comprehensive reset due to processing issues - forced log reprocessing"
      changed_when: true

    - name: Start fail2ban service
      ansible.builtin.systemd:
        name: fail2ban
        state: started

- name: Add fail2ban timezone fix cron job
  ansible.builtin.cron:
    name: "Fail2ban timezone fix"
    hour: "0"
    minute: "0"
    job: "/opt/security/fail2ban-timezone-fix.sh"
    user: root
  become: true
