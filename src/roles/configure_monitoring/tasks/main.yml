---
- name: Check if monitoring is enabled
  ansible.builtin.debug:
    msg: "Monitoring is {{ 'enabled' if features.monitoring else 'disabled' }}"
  when: features.monitoring

- name: Install lightweight monitoring tools
  ansible.builtin.apt:
    name:
      - htop
      - iotop
      - nethogs
      - logwatch
      - auditd
      - aide
      - jq
      - curl
      - wget
      - rsyslog
      - logrotate
    state: present
    update_cache: true
  become: true
  when: features.monitoring

- name: Create monitoring directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
    owner: root
    group: root
  loop:
    - /opt/monitoring
    - /opt/monitoring/scripts
    - /opt/monitoring/dashboards
    - /opt/monitoring/alerts
    - /opt/security
    - /var/log/security
    - /var/log/monitoring
  become: true

# Remove the problematic validation task - handlers are defined in the role
# - name: Validate required handlers exist
#   ansible.builtin.assert:
#     that:
#       - "'restart docker' in (ansible_playbook_python | default('')) or 'restart docker' in (ansible_playbook_python | default(''))"
#     fail_msg: "Required handler 'restart docker' is missing"
#     success_msg: "All required handlers are available"
#   delegate_to: localhost
#   run_once: true

# Lightweight Prometheus Node Exporter (if enabled)
- name: Download Prometheus Node Exporter
  ansible.builtin.get_url:
    url: "https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz"
    dest: /tmp/node_exporter.tar.gz
    mode: "0644"
  become: true
  when: features.monitoring.prometheus.enabled

- name: Extract Prometheus Node Exporter
  ansible.builtin.unarchive:
    src: /tmp/node_exporter.tar.gz
    dest: /opt/monitoring/
    remote_src: true
    creates: /opt/monitoring/node_exporter-1.6.1.linux-amd64/node_exporter
  become: true
  when: features.monitoring.prometheus.enabled

- name: Create Node Exporter service
  ansible.builtin.template:
    src: node-exporter.service.j2
    dest: /etc/systemd/system/node-exporter.service
    owner: root
    group: root
    mode: "0644"
  become: true
  when: features.monitoring.prometheus.enabled

- name: Start and enable Node Exporter
  ansible.builtin.systemd:
    name: node-exporter
    state: started
    enabled: true
    daemon_reload: true
  become: true
  when: features.monitoring.prometheus.enabled

# Enhanced Security Monitoring
- name: Configure security event logging
  ansible.builtin.template:
    src: security-events.conf.j2
    dest: /etc/rsyslog.d/security-events.conf
    owner: root
    group: root
    mode: "0644"
  become: true
  notify: Restart rsyslog

- name: Configure log integrity monitoring
  ansible.builtin.template:
    src: log-monitor.sh.j2
    dest: /opt/security/log-monitor.sh
    mode: "0755"
    owner: root
    group: root
  become: true

- name: Configure AIDE for file integrity monitoring
  ansible.builtin.template:
    src: aide.conf.j2
    dest: /etc/aide/aide.conf
    owner: root
    group: root
    mode: "0644"
  become: true

- name: Initialize AIDE database
  ansible.builtin.command: aideinit
  become: true
  changed_when: false

- name: Configure auditd for system monitoring
  ansible.builtin.template:
    src: auditd.conf.j2
    dest: /etc/audit/auditd.conf
    owner: root
    group: root
    mode: "0644"
  become: true
  notify: Restart auditd

- name: Configure audit rules
  ansible.builtin.template:
    src: audit.rules.j2
    dest: /etc/audit/rules.d/audit.rules
    owner: root
    group: root
    mode: "0644"
  become: true
  notify: Restart auditd

# Lightweight Health Monitoring Scripts
- name: Configure lightweight health check script
  ansible.builtin.template:
    src: health-check-lightweight.sh.j2
    dest: /opt/monitoring/health-check.sh
    mode: "0755"
    owner: root
    group: root
  become: true

- name: Configure resource monitoring script
  ansible.builtin.template:
    src: resource-monitor.sh.j2
    dest: /opt/monitoring/resource-monitor.sh
    mode: "0755"
    owner: root
    group: root
  become: true

- name: Configure container monitoring script
  ansible.builtin.template:
    src: container-monitor.sh.j2
    dest: /opt/monitoring/container-monitor.sh
    mode: "0755"
    owner: root
    group: root
  become: true

- name: Configure lightweight alerting script
  ansible.builtin.template:
    src: alert-manager-lightweight.sh.j2
    dest: /opt/monitoring/alert-manager.sh
    mode: "0755"
    owner: root
    group: root
  become: true

# Docker Logging Configuration (lightweight) - with error handling
- name: Configure Docker logging driver (lightweight)
  ansible.builtin.template:
    src: daemon-logging-lightweight.json.j2
    dest: /etc/docker/daemon-logging.json
    owner: root
    group: root
    mode: "0644"
  become: true
  notify: Restart docker

# Create monitoring cron jobs
- name: Create lightweight monitoring cron jobs
  ansible.builtin.cron:
    name: "{{ item.name }}"
    hour: "{{ item.hour }}"
    minute: "{{ item.minute }}"
    job: "{{ item.job }}"
    user: root
  loop:
    - name: "Security Log Analysis"
      hour: "1"
      minute: "0"
      job: "/opt/security/log-monitor.sh"
    - name: "File Integrity Check"
      hour: "3"
      minute: "0"
      job: "aide --check"
    - name: "System Health Check"
      hour: "*/6"
      minute: "0"
      job: "/opt/monitoring/health-check.sh"
    - name: "Resource Monitoring"
      hour: "*/2"
      minute: "0"
      job: "/opt/monitoring/resource-monitor.sh"
    - name: "Container Monitoring"
      hour: "*/5"
      minute: "0"
      job: "/opt/monitoring/container-monitor.sh"
  become: true

- name: Configure log rotation for monitoring logs
  ansible.builtin.template:
    src: monitoring-logs-lightweight.j2
    dest: /etc/logrotate.d/monitoring-logs
    owner: root
    group: root
    mode: "0644"
  become: true

# Create alert state files for deduplication
- name: Create resource alerts state file
  ansible.builtin.file:
    path: /var/log/resource-alerts.state
    state: touch
    mode: "0644"
    owner: root
    group: root
  become: true

- name: Create container alerts state file
  ansible.builtin.file:
    path: /var/log/container-alerts.state
    state: touch
    mode: "0644"
    owner: root
    group: root
  become: true
