---
- name: Check if Docker is running
  ansible.builtin.command: docker info
  register: docker_info
  changed_when: false
  failed_when: false

- name: Fail if Docker is not running
  ansible.builtin.fail:
    msg: "Docker is not running. Please install and start Docker first."
  when: docker_info.rc != 0

# Remove project-specific networks
- name: Remove project Docker networks
  community.docker.docker_network:
    name: "{{ item }}"
    state: absent
  loop:
    - "web-network"
    - "db-network"
    - "monitoring-network"
    - "api-network"
    - "cache-network"
  become: true
  failed_when: false

# Optional: Remove ALL custom networks (use with caution)
- name: Remove all custom Docker networks
  community.docker.docker_network:
    name: "{{ item }}"
    state: absent
  loop: "{{ existing_networks.stdout_lines | select('match', '^(?!bridge|host|none).*$') | list }}"
  become: true
  failed_when: false
  when: configure_docker_networks_remove_all | default(false)

# Get list of all networks (only if removing all)
- name: Get existing Docker networks
  ansible.builtin.command: docker network ls --format "{{ '{{' }}.Name{{ '}}' }}"
  register: existing_networks
  changed_when: false
  become: true
  when: configure_docker_networks_remove_all | default(false)

# Prune unused networks
- name: Prune unused Docker networks
  ansible.builtin.command: docker network prune -f
  become: true
  changed_when: false

# Create default networks (only for testing/validation)
- name: Create default Docker networks for testing
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default(configure_docker_networks_default_driver) }}"
    ipam_config:
      - subnet: "{{ item.subnet }}"
    state: present
    labels:
      description: "{{ item.description }}"
      environment: "{{ configure_docker_networks_labels.environment }}"
      managed_by: "{{ configure_docker_networks_labels.managed_by }}"
  loop: "{{ configure_docker_networks_default_networks }}"
  become: true
  when: configure_docker_networks_test_mode | default(false)

# Create custom networks if defined (only for testing/validation)
- name: Create custom Docker networks for testing
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default(configure_docker_networks_default_driver) }}"
    ipam_config:
      - subnet: "{{ item.subnet }}"
    state: present
    labels:
      description: "{{ item.description }}"
      environment: "{{ configure_docker_networks_labels.environment }}"
      managed_by: "{{ configure_docker_networks_labels.managed_by }}"
  loop: "{{ configure_docker_networks_custom_networks }}"
  become: true
  when: configure_docker_networks_test_mode | default(false) and configure_docker_networks_custom_networks | length > 0

# Display network information (only in test mode)
- name: List Docker networks
  ansible.builtin.command: docker network ls --format "table {{ '{{' }}.Name{{ '}}' }}\t{{ '{{' }}.Driver{{ '}}' }}\t{{ '{{' }}.Scope{{ '}}' }}"
  register: docker_networks
  changed_when: false
  become: true
  when: configure_docker_networks_test_mode | default(false)

- name: Debug Docker networks
  ansible.builtin.debug:
    msg: "{{ docker_networks.stdout_lines }}"
  when: configure_docker_networks_test_mode | default(false)

# Verify network connectivity (only in test mode)
- name: Test network connectivity
  ansible.builtin.command: docker run --rm --network web-network alpine ping -c 1 8.8.8.8
  register: network_test
  changed_when: false
  failed_when: false
  become: true
  when: configure_docker_networks_test_mode | default(false)

- name: Debug network connectivity test
  ansible.builtin.debug:
    msg: "Network connectivity test: {{ 'PASSED' if network_test.rc == 0 else 'FAILED' }}"
  when: configure_docker_networks_test_mode | default(false)

# Cleanup: Remove all created networks after testing
- name: Remove all created networks after testing
  community.docker.docker_network:
    name: "{{ item.name }}"
    state: absent
  loop: "{{ configure_docker_networks_default_networks + configure_docker_networks_custom_networks }}"
  become: true
  failed_when: false
  when: configure_docker_networks_test_mode | default(false)

- name: Final network cleanup
  ansible.builtin.command: docker network prune -f
  become: true
  changed_when: false
  when: configure_docker_networks_test_mode | default(false)

- name: Debug final cleanup
  ansible.builtin.debug:
    msg: "All test networks have been removed. No predefined networks remain."
  when: configure_docker_networks_test_mode | default(false)
