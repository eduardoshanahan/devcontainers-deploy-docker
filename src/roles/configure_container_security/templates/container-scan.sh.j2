#!/bin/bash

# Container Security Scanning Script
# This script scans Docker images for vulnerabilities

LOG_FILE="/var/log/container-security.log"
SCAN_DIR="/opt/security/scans"
DATE=$(date +%Y%m%d_%H%M%S)

# Create scan directory
mkdir -p "$SCAN_DIR"

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

log_message "Starting container security scan"

# Get list of running containers
RUNNING_CONTAINERS=$(docker ps --format "{{ '{{' }}.Image{{ '}}' }}")

if [ -z "$RUNNING_CONTAINERS" ]; then
    log_message "No running containers found"
    exit 0
fi

# Scan each running container
for IMAGE in $RUNNING_CONTAINERS; do
    log_message "Scanning image: $IMAGE"
    
    # Use Trivy to scan for vulnerabilities
    trivy image --format json --output "$SCAN_DIR/scan_${IMAGE//\//_}_${DATE}.json" "$IMAGE" 2>/dev/null
    
    if [ $? -eq 0 ]; then
        log_message "Scan completed for $IMAGE"
        
        # Check for high/critical vulnerabilities
        VULN_COUNT=$(trivy image --severity HIGH,CRITICAL "$IMAGE" 2>/dev/null | grep -c "HIGH\|CRITICAL" || echo "0")
        
        if [ "$VULN_COUNT" -gt 0 ]; then
            log_message "WARNING: Found $VULN_COUNT high/critical vulnerabilities in $IMAGE"
            
            # Send alert if configured
            if [ -n "$CONTAINER_SECURITY_ALERT_EMAIL" ]; then
                echo "High/Critical vulnerabilities found in container image: $IMAGE" | \
                mail -s "Container Security Alert" "$CONTAINER_SECURITY_ALERT_EMAIL"
            fi
        fi
    else
        log_message "ERROR: Failed to scan $IMAGE"
    fi
done

log_message "Container security scan completed" 