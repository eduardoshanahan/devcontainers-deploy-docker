#!/bin/bash

# Enhanced error handler for unattended upgrades
# This script runs daily to check and fix common issues

LOG_FILE="/var/log/unattended-upgrade-error-handler.log"
ERROR_STATE_FILE="/var/log/unattended-upgrade-errors.state"
EMAIL="{{ configure_security_updates_email }}"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Function to check if error has already been reported
is_error_already_reported() {
    local error_hash="$1"
    if [ -f "$ERROR_STATE_FILE" ] && grep -q "$error_hash" "$ERROR_STATE_FILE"; then
        return 0  # Already reported
    fi
    return 1  # Not reported yet
}

# Function to mark error as reported
mark_error_as_reported() {
    local error_hash="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $error_hash" >> "$ERROR_STATE_FILE"
}

notify_error() {
    local message="$1"
    log "ERROR: $message"
    
    if [ -n "$EMAIL" ]; then
        echo "$message" | mail -s "Unattended Upgrade Error Alert" "$EMAIL"
    fi
}

notify_success() {
    local message="$1"
    log "SUCCESS: $message"
}

# Check if apt is locked
if fuser /var/lib/dpkg/lock >/dev/null 2>&1; then
    notify_error "APT is locked, waiting for lock to be released"
    sleep 300
fi

# AGGRESSIVE CACHE CLEARING - Clear all caches every time
log "Starting aggressive cache clearing and repository health check"

# Clear all apt caches
apt clean >> "$LOG_FILE" 2>&1
apt autoclean >> "$LOG_FILE" 2>&1
apt autoremove >> "$LOG_FILE" 2>&1

# Clear package lists cache
rm -rf /var/lib/apt/lists/* >> "$LOG_FILE" 2>&1 || true

# Clear dpkg cache
rm -rf /var/cache/apt/archives/*.deb >> "$LOG_FILE" 2>&1 || true

# Force update package lists with fresh cache
if apt update >> "$LOG_FILE" 2>&1; then
    notify_success "Package lists updated successfully after cache clearing"
else
    notify_error "Failed to update package lists after cache clearing"
    # Try to fix repository issues
    apt autoclean >> "$LOG_FILE" 2>&1
    apt autoremove >> "$LOG_FILE" 2>&1
fi

# Check for and fix broken packages
if dpkg --configure -a >> "$LOG_FILE" 2>&1; then
    notify_success "Fixed any broken package configurations"
else
    notify_error "Failed to fix broken package configurations"
fi

# Enhanced handling for problematic kernel packages
PROBLEMATIC_PACKAGES=("linux-virtual" "linux-image-virtual" "linux-image-generic")

for package in "${PROBLEMATIC_PACKAGES[@]}"; do
    if dpkg -l | grep -q "^ii.*$package"; then
        log "Found potentially problematic package: $package"
        
        # Check if there's a newer version available
        if apt list --upgradable 2>/dev/null | grep -q "$package"; then
            log "Attempting to upgrade $package with enhanced error handling"
            
            # First, try to remove any held packages
            echo "$package install" | dpkg --set-selections
            
            # Try to upgrade with specific error handling and force options
            if apt install --only-upgrade "$package" -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -o Dpkg::Options::="--force-depends" >> "$LOG_FILE" 2>&1; then
                notify_success "Successfully upgraded $package"
            else
                notify_error "Failed to upgrade $package, attempting alternative approach"
                
                # Try to install the latest available version
                if apt install "$package" -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" >> "$LOG_FILE" 2>&1; then
                    notify_success "Successfully installed latest version of $package"
                else
                    notify_error "Failed to install $package, marking as held and skipping"
                    echo "$package hold" | dpkg --set-selections
                fi
            fi
        fi
    fi
done

# Check for specific 404 errors in unattended upgrades logs
if [ -f "/var/log/unattended-upgrades/unattended-upgrades.log" ]; then
    RECENT_404_ERRORS=$(tail -n 100 "/var/log/unattended-upgrades/unattended-upgrades.log" | grep -i "404\|not found" | wc -l)
    
    if [ "$RECENT_404_ERRORS" -gt 0 ]; then
        log "Found $RECENT_404_ERRORS 404 errors in unattended upgrades log"
        
        # Extract specific 404 errors and attempt to fix them
        tail -n 100 "/var/log/unattended-upgrades/unattended-upgrades.log" | grep -i "404\|not found" | while read -r line; do
            log "404 Error found: $line"
            
            # Generate hash for this specific error
            ERROR_HASH=$(echo "$line" | md5sum | cut -d' ' -f1)
            
            # Only notify if this error hasn't been reported before
            if ! is_error_already_reported "$ERROR_HASH"; then
                notify_error "Found new 404 error: $line"
                mark_error_as_reported "$ERROR_HASH"
                log "Marked error as reported with hash: $ERROR_HASH"
            else
                log "404 error already reported, skipping: $line"
            fi
            
            # Extract package name from 404 error and attempt fixes (regardless of reporting status)
            if echo "$line" | grep -q "linux-virtual\|linux-image"; then
                log "Attempting to fix kernel package 404 error"
                
                # Force update of package lists with cache clearing
                apt clean >> "$LOG_FILE" 2>&1
                apt update --fix-missing >> "$LOG_FILE" 2>&1
                
                # Try to install the latest available kernel packages
                apt install --only-upgrade linux-virtual linux-image-virtual linux-image-generic -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" >> "$LOG_FILE" 2>&1 || true
            fi
        done
    fi
fi

# Check for any held packages and try to resolve them
HELD_PACKAGES=$(dpkg --get-selections | grep hold | awk '{print $1}')
if [ -n "$HELD_PACKAGES" ]; then
    log "Found held packages: $HELD_PACKAGES"
    
    for package in $HELD_PACKAGES; do
        if [[ "$package" =~ linux- ]]; then
            log "Attempting to resolve held kernel package: $package"
            
            # Try to install the latest version
            echo "$package install" | dpkg --set-selections
            apt install "$package" -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" >> "$LOG_FILE" 2>&1 || true
        fi
    done
fi

# Final aggressive cleanup and repository refresh
apt clean >> "$LOG_FILE" 2>&1
apt autoclean >> "$LOG_FILE" 2>&1
apt autoremove >> "$LOG_FILE" 2>&1

# Force update of package lists to ensure we have the latest repository information
apt update --fix-missing >> "$LOG_FILE" 2>&1

log "Enhanced repository health check with aggressive cache clearing completed"

# Rotate log file if it gets too large
if [ -f "$LOG_FILE" ] && [ $(stat -c%s "$LOG_FILE") -gt 1048576 ]; then
    mv "$LOG_FILE" "${LOG_FILE}.1"
    gzip "${LOG_FILE}.1" 2>/dev/null || true
fi

# Rotate error state file if it gets too large (prevent it from growing indefinitely)
if [ -f "$ERROR_STATE_FILE" ] && [ $(stat -c%s "$ERROR_STATE_FILE") -gt 1048576 ]; then
    mv "$ERROR_STATE_FILE" "${ERROR_STATE_FILE}.1"
    gzip "${ERROR_STATE_FILE}.1" 2>/dev/null || true
fi 