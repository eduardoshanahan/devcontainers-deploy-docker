---
- name: Install prerequisites for Docker
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - python3-pip
    state: present
    update_cache: true
  become: true

# Clean slate option - remove all existing Docker images and containers
- name: Check if Docker is running (for clean slate)
  ansible.builtin.service:
    name: docker
    state: started
  register: docker_service_status
  failed_when: false
  become: true

- name: Stop all running containers (clean slate)
  ansible.builtin.command: docker stop $(docker ps -q)
  when:
    - deploy_docker_clean_slate | bool
    - docker_service_status.state == "started"
  failed_when: false
  changed_when: false
  become: true

- name: Remove all containers (clean slate)
  ansible.builtin.command: docker rm $(docker ps -aq)
  when: deploy_docker_clean_slate | bool
  failed_when: false
  changed_when: false
  become: true

- name: Remove all Docker images (clean slate)
  ansible.builtin.command: docker rmi $(docker images -q)
  when: deploy_docker_clean_slate | bool
  failed_when: false
  changed_when: false
  become: true

- name: Remove all Docker volumes (clean slate)
  ansible.builtin.command: docker volume rm $(docker volume ls -q)
  when: deploy_docker_clean_slate | bool
  failed_when: false
  changed_when: false
  become: true

- name: Remove all Docker networks (except default)
  ansible.builtin.command: docker network rm $(docker network ls --filter type=custom -q)
  when: deploy_docker_clean_slate | bool
  failed_when: false
  changed_when: false
  become: true

- name: Prune Docker system (clean slate)
  ansible.builtin.command: docker system prune -af
  when: deploy_docker_clean_slate | bool
  failed_when: false
  changed_when: false
  become: true

- name: Create Docker GPG key directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"
    owner: root
    group: root
  become: true

- name: Check for existing Docker keys
  ansible.builtin.command: apt-key list | grep -i docker
  register: existing_docker_keys
  changed_when: false
  failed_when: false
  become: true

- name: Remove existing Docker keys (generic approach)
  ansible.builtin.command: apt-key del {{ item }}
  loop: "{{ existing_docker_keys.stdout_lines | select('match', '^pub') | map('regex_replace', '^pub.*([A-F0-9]{16}).*', '\\1') | list }}"
  when: existing_docker_keys.stdout_lines | length > 0
  failed_when: false
  changed_when: false
  become: true

- name: Remove ALL old Docker GPG keys and repositories
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/apt/keyrings/docker.gpg
    - /etc/apt/trusted.gpg.d/docker.gpg
    - /etc/apt/sources.list.d/docker.list
    - /etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list
    - /etc/apt/sources.list.d/docker.list.save
  become: true

- name: Clear ALL apt cache and lists
  ansible.builtin.command: rm -rf /var/lib/apt/lists/*
  become: true
  changed_when: false

- name: Clear apt cache completely
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 0
  become: true

- name: Download Docker GPG key with retry
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.gpg
    mode: "0644"
    timeout: 30
  become: true
  retries: 3
  delay: 5

- name: Verify Docker GPG key was downloaded
  ansible.builtin.stat:
    path: /etc/apt/keyrings/docker.gpg
  register: docker_gpg_key

- name: Fail if Docker GPG key is missing
  ansible.builtin.fail:
    msg: "Docker GPG key download failed"
  when: not docker_gpg_key.stat.exists

- name: Set correct permissions for Docker GPG key
  ansible.builtin.file:
    path: /etc/apt/keyrings/docker.gpg
    mode: "0644"
    owner: root
    group: root
  become: true

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
  become: true

# Try direct installation first (bypass repository issues)
- name: Install Docker Engine directly
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
    update_cache: true
  register: docker_direct_install
  failed_when: false
  become: true

- name: Install Docker using alternative method if direct install failed
  when: docker_direct_install is failed
  block:
    - name: Add Docker repository manually
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/docker.list
        line: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable"
        create: true
        mode: "0644"
        owner: root
        group: root
      become: true

    - name: Update apt cache after manual repository addition
      ansible.builtin.apt:
        update_cache: true
      become: true

    - name: Install Docker Engine and containerd
      ansible.builtin.apt:
        name: "{{ deploy_docker_packages }}"
        state: present
        update_cache: true
      become: true

- name: Install Docker Python library for Ansible
  ansible.builtin.pip:
    name: docker
    state: present
  become: true

# Completely reset Docker configuration
- name: Stop Docker service
  ansible.builtin.service:
    name: docker
    state: stopped
  become: true

- name: Remove all Docker configuration files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/docker/daemon.json
    - /etc/docker/seccomp-profile.json
    - /etc/docker/daemon-secure.json
    - /etc/docker/daemon-logging.json
  become: true

- name: Reset Docker daemon configuration
  ansible.builtin.command: docker system prune -f
  become: true
  failed_when: false
  changed_when: false

- name: Start Docker with default configuration
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true
  become: true

- name: Wait for Docker to be ready
  ansible.builtin.wait_for:
    timeout: 30
  become: true

- name: Test Docker is working
  ansible.builtin.command: docker info
  register: docker_info
  changed_when: false
  become: true

- name: Display Docker info
  ansible.builtin.debug:
    msg: "{{ docker_info.stdout }}"

# Only apply basic configuration if Docker is working
- name: Ensure Docker configuration directory exists
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: "0755"
    owner: root
    group: root
  become: true

- name: Configure Docker daemon (minimal configuration)
  ansible.builtin.template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: "0644"
  become: true
  notify: Restart docker

- name: Create Docker group
  ansible.builtin.group:
    name: docker
    state: present
  become: true

- name: Add deployment user to Docker group
  ansible.builtin.user:
    name: "{{ containers_deployment_user }}"
    groups: docker
    append: true
  become: true

- name: Restart Docker daemon to apply group changes
  ansible.builtin.service:
    name: docker
    state: restarted
  become: true

- name: Wait for Docker to be ready after restart
  ansible.builtin.wait_for:
    timeout: 30
  become: true

- name: Configure Docker network security settings
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: true
  loop:
    - { name: "net.bridge.bridge-nf-call-iptables", value: "1" }
    - { name: "net.bridge.bridge-nf-call-ip6tables", value: "1" }
    - { name: "net.ipv4.ip_forward", value: "1" }
  become: true

- name: Display Docker version
  ansible.builtin.command: docker --version
  register: docker_version
  changed_when: false
  become: true

- name: Debug Docker version
  ansible.builtin.debug:
    msg: "{{ docker_version.stdout }}"

- name: Check if Docker Compose is available
  ansible.builtin.command: docker compose version
  register: docker_compose_check
  changed_when: false
  failed_when: false
  become: true

- name: Display Docker Compose status and version
  ansible.builtin.debug:
    msg: >-
      Docker Compose is {{ 'available' if docker_compose_check.rc == 0 else 'not available' }}
      {{ ' - Version: ' + docker_compose_check.stdout if docker_compose_check.rc == 0 else '' }}

- name: List Docker networks
  ansible.builtin.command: docker network ls --format "table {{ '{{' }}.Name{{ '}}' }}\t{{ '{{' }}.Driver{{ '}}' }}\t{{ '{{' }}.Scope{{ '}}' }}"
  register: docker_networks
  changed_when: false
  become: true

- name: Debug Docker networks
  ansible.builtin.debug:
    msg: "{{ docker_networks.stdout_lines }}"
