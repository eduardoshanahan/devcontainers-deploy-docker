---
- name: Install prerequisites for Docker
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - python3-pip
    state: present
    update_cache: true
  become: true

- name: Create Docker GPG key directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"
    owner: root
    group: root
  become: true

- name: Add Docker's official GPG key (modern method)
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.gpg
    mode: "0644"
  become: true

- name: Remove old Docker repository files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/apt/sources.list.d/docker.list
    - /etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list
  become: true

- name: Add Docker repository (modern method)
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
    state: present
    filename: docker
    update_cache: true
  become: true

- name: Install Docker Engine and containerd
  ansible.builtin.apt:
    name: "{{ deploy_docker_packages }}"
    state: present
    update_cache: true
  become: true

- name: Install Docker Python library for Ansible
  ansible.builtin.pip:
    name: docker
    state: present
  become: true

# Completely reset Docker configuration
- name: Stop Docker service
  ansible.builtin.service:
    name: docker
    state: stopped
  become: true

- name: Remove all Docker configuration files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/docker/daemon.json
    - /etc/docker/seccomp-profile.json
    - /etc/docker/daemon-secure.json
    - /etc/docker/daemon-logging.json
  become: true

- name: Reset Docker daemon configuration
  ansible.builtin.command: docker system prune -f
  become: true
  failed_when: false
  changed_when: false

- name: Start Docker with default configuration
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true
  become: true

- name: Wait for Docker to be ready
  ansible.builtin.wait_for:
    timeout: 30
  become: true

- name: Test Docker is working
  ansible.builtin.command: docker info
  register: docker_info
  changed_when: false
  become: true

- name: Display Docker info
  ansible.builtin.debug:
    msg: "{{ docker_info.stdout }}"

# Only apply basic configuration if Docker is working
- name: Ensure Docker configuration directory exists
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: "0755"
    owner: root
    group: root
  become: true

- name: Configure Docker daemon (minimal configuration)
  ansible.builtin.template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: "0644"
  become: true
  notify: Restart docker

- name: Create Docker group
  ansible.builtin.group:
    name: docker
    state: present
  become: true

- name: Add deployment user to Docker group
  ansible.builtin.user:
    name: "{{ containers_deployment_user }}"
    groups: docker
    append: true
  become: true

- name: Restart Docker daemon to apply group changes
  ansible.builtin.service:
    name: docker
    state: restarted
  become: true

- name: Wait for Docker to be ready after restart
  ansible.builtin.wait_for:
    timeout: 30
  become: true

- name: Configure Docker network security settings
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: true
  loop:
    - { name: "net.bridge.bridge-nf-call-iptables", value: "1" }
    - { name: "net.bridge.bridge-nf-call-ip6tables", value: "1" }
    - { name: "net.ipv4.ip_forward", value: "1" }
  become: true

- name: Display Docker version
  ansible.builtin.command: docker --version
  register: docker_version
  changed_when: false
  become: true

- name: Debug Docker version
  ansible.builtin.debug:
    msg: "{{ docker_version.stdout }}"

- name: Check if Docker Compose is available
  ansible.builtin.command: docker compose version
  register: docker_compose_check
  changed_when: false
  failed_when: false
  become: true

- name: Display Docker Compose status and version
  ansible.builtin.debug:
    msg: >-
      Docker Compose is {{ 'available' if docker_compose_check.rc == 0 else 'not available' }}
      {{ ' - Version: ' + docker_compose_check.stdout if docker_compose_check.rc == 0 else '' }}

- name: List Docker networks
  ansible.builtin.command: docker network ls --format "table {{ '{{' }}.Name{{ '}}' }}\t{{ '{{' }}.Driver{{ '}}' }}\t{{ '{{' }}.Scope{{ '}}' }}"
  register: docker_networks
  changed_when: false
  become: true

- name: Debug Docker networks
  ansible.builtin.debug:
    msg: "{{ docker_networks.stdout_lines }}"
