#!/bin/bash

# Comprehensive System Report Generator
# Generates detailed system reports with multiple data sources
# Last updated: 2025-09-10 15:15:00 UTC - Fixed Security Status section with comprehensive data

LOG_FILE="/var/log/reporting/report-generation.log"
REPORT_DIR="{{ configure_reporting_storage_dir }}"
DATE=$(date +%Y%m%d_%H%M%S)
REPORT_TYPE="$1"
REPORT_FILE="$REPORT_DIR/${REPORT_TYPE}_report_$DATE.html"

# Email configuration
EMAIL="{{ configure_reporting_email }}"
GMAIL_ENABLED="{{ configure_reporting_gmail_enabled | lower }}"
GMAIL_USER="{{ configure_reporting_gmail_user }}"
GMAIL_PASSWORD="{{ configure_reporting_gmail_password }}"

# Logging function
log_message() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

# Function to get system information
get_system_info() {
    cat << EOF
    <h2>System Information</h2>
    <table class="info-table">
        <tr><td>Hostname</td><td>$(hostname)</td></tr>
        <tr><td>OS</td><td>$(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)</td></tr>
        <tr><td>Kernel</td><td>$(uname -r)</td></tr>
        <tr><td>Uptime</td><td>$(uptime -p)</td></tr>
        <tr><td>Load Average</td><td>$(uptime | awk -F'load average:' '{print $2}')</td></tr>
    </table>
EOF
}

# Function to get resource usage
get_resource_usage() {
    local disk_usage=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
    local memory_usage=$(free | awk 'NR==2{printf "%.1f", $3*100/$2}')
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//')
    
    cat << EOF
    <h2>Resource Usage</h2>
    <table class="info-table">
        <tr><td>Disk Usage</td><td>${disk_usage}%</td></tr>
        <tr><td>Memory Usage</td><td>${memory_usage}%</td></tr>
        <tr><td>CPU Usage</td><td>${cpu_usage}%</td></tr>
    </table>
EOF
}

# Function to get Docker information
get_docker_info() {
    local running_containers=$(docker ps -q | wc -l 2>/dev/null || echo "0")
    local total_containers=$(docker ps -a -q | wc -l 2>/dev/null || echo "0")
    local docker_images=$(docker images -q | wc -l 2>/dev/null || echo "0")
    
    cat << EOF
    <h2>Docker Status</h2>
    <table class="info-table">
        <tr><td>Running Containers</td><td>$running_containers</td></tr>
        <tr><td>Total Containers</td><td>$total_containers</td></tr>
        <tr><td>Docker Images</td><td>$docker_images</td></tr>
    </table>
EOF
}

# Function to get security information with proper classification
get_security_info() {
    # Calculate all security variables - FIXED: Clean variables to remove newlines
    failed_passwords=$(grep -c "Failed password" /var/log/auth.log 2>/dev/null | tr -d '\n\r' || echo "0")
    auth_failures=$(grep -c "authentication failure" /var/log/auth.log 2>/dev/null | tr -d '\n\r' || echo "0")
    invalid_users=$(grep -c "Invalid user" /var/log/auth.log 2>/dev/null | tr -d '\n\r' || echo "0")
    connection_closed=$(grep -c "Connection closed by authenticating user" /var/log/auth.log 2>/dev/null | tr -d '\n\r' || echo "0")
    preauth_disconnect=$(grep -c "Disconnected from authenticating user" /var/log/auth.log 2>/dev/null | tr -d '\n\r' || echo "0")
    
    # Ensure all variables are numeric
    failed_passwords=${failed_passwords:-0}
    auth_failures=${auth_failures:-0}
    invalid_users=${invalid_users:-0}
    connection_closed=${connection_closed:-0}
    preauth_disconnect=${preauth_disconnect:-0}
    
    total_failed_logins=$((failed_passwords + auth_failures + invalid_users + connection_closed + preauth_disconnect))
    
    # Get fail2ban statistics
    currently_banned="0"
    total_banned_lifetime="0"
    fail2ban_status="Unknown"
    fail2ban_health="Unknown"
    
    if command -v fail2ban-client >/dev/null 2>&1; then
        # Check if fail2ban service is running
        if systemctl is-active --quiet fail2ban; then
            fail2ban_service_status="Running"
            
            # Get jail status
            fail2ban_jail_status=$(sudo fail2ban-client status sshd 2>/dev/null || echo "")
            if [ -n "$fail2ban_jail_status" ]; then
                currently_banned=$(echo "$fail2ban_jail_status" | grep -i "currently banned" | sed 's/.*: *//' | awk '{print $1}' || echo "0")
                total_banned_lifetime=$(echo "$fail2ban_jail_status" | grep -i "total banned" | sed 's/.*: *//' | awk '{print $1}' || echo "0")
                fail2ban_total_failed=$(echo "$fail2ban_jail_status" | grep -i "total failed" | sed 's/.*: *//' | awk '{print $1}' || echo "0")
                
                # Health assessment
                if [ "$fail2ban_total_failed" -gt "0" ] || [ "$total_banned_lifetime" -gt "0" ]; then
                    fail2ban_health="✅ Active (Processing attempts)"
                elif grep -q "timezone issue" /var/log/fail2ban.log 2>/dev/null; then
                    fail2ban_health="⚠️ Timezone Issues Detected"
                else
                    fail2ban_health="⚠️ Not Processing Attempts"
                fi
            else
                fail2ban_health="❌ Jail Status Unavailable"
            fi
        else
            fail2ban_service_status="Stopped"
            fail2ban_health="❌ Service Not Running"
        fi
    else
        fail2ban_service_status="Not Installed"
        fail2ban_health="❌ Not Installed"
    fi
    
    # Check for recent timezone issues
    timezone_issues=$(grep -c "timezone issue" /var/log/fail2ban.log 2>/dev/null || echo "0")
    last_ban=$(grep "Ban " /var/log/fail2ban.log 2>/dev/null | tail -1 | awk '{print $1, $2}' || echo "Never")
    
    # Get health monitor alerts
    critical_alerts=$(grep -c "CRITICAL" /var/log/health-monitor.log 2>/dev/null || echo "0")
    high_alerts=$(grep -c "HIGH" /var/log/health-monitor.log 2>/dev/null || echo "0")
    medium_alerts=$(grep -c "MEDIUM" /var/log/health-monitor.log 2>/dev/null || echo "0")
    info_messages=$(grep -c "INFO" /var/log/health-monitor.log 2>/dev/null || echo "0")
    
    # Generate the Security Status HTML section
    cat << EOF
    <h2>Security Status</h2>
    <table class="info-table">
        <tr><td>Failed Login Attempts</td><td>$total_failed_logins</td></tr>
        <tr><td>Currently Banned IP Addresses</td><td>$currently_banned</td></tr>
        <tr><td>Total Banned (Lifetime)</td><td>$total_banned_lifetime</td></tr>
    </table>
    
    <h3>Fail2ban Health Monitor</h3>
    <table class="info-table">
        <tr><td>Service Status</td><td>$fail2ban_service_status</td></tr>
        <tr><td>Health Assessment</td><td>$fail2ban_health</td></tr>
        <tr><td>Attempts Detected by Fail2ban</td><td>$fail2ban_total_failed</td></tr>
        <tr><td>Timezone Issues (Lifetime)</td><td>$timezone_issues</td></tr>
        <tr><td>Last Successful Ban</td><td>$last_ban</td></tr>
    </table>
    
    <h3>Alert Classification</h3>
    <table class="info-table">
        <tr><td>CRITICAL Alerts (Immediate Action)</td><td class="status-critical">$critical_alerts</td></tr>
        <tr><td>HIGH Alerts (Action Soon)</td><td class="status-warning">$high_alerts</td></tr>
        <tr><td>MEDIUM Alerts (Monitor)</td><td>$medium_alerts</td></tr>
        <tr><td>INFO Messages</td><td>$info_messages</td></tr>
    </table>
EOF
}

# Function to get recent alerts
get_recent_alerts() {
    cat << EOF
    <h2>Recent Alerts (Last 24 Hours)</h2>
    <div class="alerts-section">
EOF
    
    # Get alerts from various log files
    if [ -f "/var/log/health-monitor.log" ]; then
        echo "<h3>Health Monitor Alerts:</h3>"
        echo "<pre>"
        tail -20 /var/log/health-monitor.log | grep "ALERT\|WARNING\|ERROR" || echo "No recent alerts"
        echo "</pre>"
    fi
    
    if [ -f "/var/log/container-security.log" ]; then
        echo "<h3>Container Security Alerts:</h3>"
        echo "<pre>"
        # Only show alerts from the last 24 hours
        awk -v date="$(date -d '24 hours ago' '+%Y-%m-%d %H:%M:%S')" '$0 >= date' /var/log/container-security.log | \
        grep "ALERT\|WARNING\|ERROR" | tail -20 || echo "No recent alerts"
        echo "</pre>"
    fi
    
    cat << EOF
    </div>
EOF
}

# Function to generate HTML report
generate_html_report() {
    local report_title="$1"
    local report_period="$2"
    
    cat > "$REPORT_FILE" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>$report_title</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: #f0f0f0; padding: 20px; border-radius: 5px; }
        .info-table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        .info-table td { padding: 8px; border: 1px solid #ddd; }
        .info-table td:first-child { font-weight: bold; background-color: #f9f9f9; }
        .alerts-section { margin: 20px 0; }
        .alerts-section pre { background-color: #f5f5f5; padding: 10px; border-radius: 3px; }
        .status-good { color: green; }
        .status-warning { color: orange; }
        .status-critical { color: red; }
    </style>
</head>
<body>
    <div class="header">
        <h1>$report_title</h1>
        <p>Generated on: $(date)</p>
        <p>Report Period: $report_period</p>
        <p>Server: $(hostname)</p>
    </div>
    
    $(get_system_info)
    $(get_resource_usage)
    $(get_docker_info)
    $(get_security_info)
    $(get_recent_alerts)
    
    <div class="footer">
        <p>This report was automatically generated by the system monitoring service.</p>
    </div>
</body>
</html>
EOF
}

# Main execution
log_message "INFO" "Starting $REPORT_TYPE report generation"

case "$REPORT_TYPE" in
    "daily")
        generate_html_report "Daily System Report" "Last 24 hours"
        ;;
    "weekly")
        generate_html_report "Weekly System Report" "Last 7 days"
        ;;
    "monthly")
        generate_html_report "Monthly System Report" "Last 30 days"
        ;;
    *)
        log_message "ERROR" "Invalid report type: $REPORT_TYPE"
        exit 1
        ;;
esac

if [ $? -eq 0 ]; then
    log_message "INFO" "Report generated successfully: $REPORT_FILE"
    
    # Email the report if configured
    if [ "$GMAIL_ENABLED" = "true" ] && [ -n "$EMAIL" ]; then
        /opt/reports/email-report.sh "$REPORT_TYPE" "$REPORT_FILE"
    fi
else
    log_message "ERROR" "Failed to generate report"
    exit 1
fi
