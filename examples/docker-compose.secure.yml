version: "3.8"

networks:
  web-network:
    external: true
    name: web-network
  db-network:
    external: true
    name: db-network
  monitoring-network:
    external: true
    name: monitoring-network

services:
  # Web Application (uses web-network)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    networks:
      - web-network
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    labels:
      - "com.example.service=web"
      - "com.example.network=web-network"

  # Node.js API (uses web-network)
  api:
    image: node:18-alpine
    ports:
      - "3000:3000"
    networks:
      - web-network
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
    depends_on:
      - postgres
    restart: unless-stopped
    labels:
      - "com.example.service=api"
      - "com.example.network=web-network"

  # Database (uses db-network)
  postgres:
    image: postgres:15-alpine
    networks:
      - db-network
    environment:
      - POSTGRES_DB=myapp
      - POSTGRES_USER=myapp
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    secrets:
      - db_password
    restart: unless-stopped
    labels:
      - "com.example.service=database"
      - "com.example.network=db-network"

  # Redis Cache (uses db-network)
  redis:
    image: redis:7-alpine
    networks:
      - db-network
    volumes:
      - redis_data:/data
    restart: unless-stopped
    labels:
      - "com.example.service=cache"
      - "com.example.network=db-network"

  # Monitoring (uses monitoring-network)
  prometheus:
    image: prom/prometheus:latest
    networks:
      - monitoring-network
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    labels:
      - "com.example.service=monitoring"
      - "com.example.network=monitoring-network"

  grafana:
    image: grafana/grafana:latest
    networks:
      - monitoring-network
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
    secrets:
      - grafana_password
    restart: unless-stopped
    labels:
      - "com.example.service=monitoring"
      - "com.example.network=monitoring-network"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

secrets:
  db_password:
    file: ./secrets/db_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
