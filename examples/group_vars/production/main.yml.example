# =============================================================================
# PRODUCTION ENVIRONMENT CONFIGURATION
# =============================================================================
# 
# This file contains production-specific settings for your Ubuntu VPS server.
# 
# TO SET UP:
# 1. Copy this file to src/inventory/group_vars/production/main.yml
# 2. Customize the values for your production environment
# 3. Ensure sensitive data is in vault.yml (encrypted)
# =============================================================================

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Server IP address or hostname
vps_server_ip: "your-production-server-ip-or-hostname"

# Initial deployment user (usually 'ubuntu' for cloud providers)
initial_deployment_user: "ubuntu"

# SSH private key path for initial deployment
initial_deployment_ssh_key: "~/.ssh/your-production-ssh-key"

# =============================================================================
# CONTAINER DEPLOYMENT USER
# =============================================================================

# Dedicated user for Docker operations
containers_deployment_user: "docker_deployment"

# SSH key for the deployment user
containers_deployment_user_ssh_key: "~/.ssh/your-production-deployment-key"

# Public key path for the deployment user
containers_deployment_user_ssh_key_public: "/path/to/your/public/key.pub"

# =============================================================================
# SSH CONFIGURATION
# =============================================================================

# SSH common arguments for secure connections
ansible_ssh_common_args: "-o IdentitiesOnly=yes -o PreferredAuthentications=publickey"

# Python interpreter path
ansible_python_interpreter: "/usr/bin/python3.10"

# =============================================================================
# DOCKER NETWORK CONFIGURATION
# =============================================================================

# Default Docker networks with production naming
configure_docker_networks_default_networks:
  - name: "prod-web-network"
    subnet: "172.20.0.0/16"
    driver: "bridge"
    description: "Production web applications network"
  - name: "prod-db-network"
    subnet: "172.21.0.0/16"
    driver: "bridge"
    description: "Production database network"
  - name: "prod-monitoring-network"
    subnet: "172.22.0.0/16"
    driver: "bridge"
    description: "Production monitoring network"

# Enable network removal for clean slate deployments
configure_docker_networks_remove_all: true

# =============================================================================
# DOCKER DEPLOYMENT CONFIGURATION
# =============================================================================

# Clean slate deployment (removes all existing Docker resources)
deploy_docker_clean_slate: true

# =============================================================================
# FIREWALL CONFIGURATION
# =============================================================================

# Enable firewall configuration
configure_firewall_enabled: true

# Docker network ranges for firewall rules
configure_firewall_docker_networks:
  - "172.20.0.0/16"
  - "172.21.0.0/16"
  - "172.22.0.0/16"

# =============================================================================
# FEATURE FLAGS
# =============================================================================

# Container network test mode (disabled for production)
features:
  containers:
    networks:
      test_mode: false

# =============================================================================
# MONITORING CONFIGURATION
# =============================================================================

# Enable system monitoring
configure_monitoring_enabled: true

# Health check intervals (in seconds)
configure_monitoring_health_check_interval: 360      # 6 minutes
configure_monitoring_resource_check_interval: 120    # 2 minutes
configure_monitoring_container_check_interval: 300   # 5 minutes

# =============================================================================
# LOG MANAGEMENT
# =============================================================================

# Enable log rotation
configure_log_rotation_enabled: true

# Log retention settings
configure_log_rotation_retention_days: 30
configure_log_rotation_max_size: "100M"
configure_log_rotation_compress: true

# =============================================================================
# SECURITY UPDATES
# =============================================================================

# Enable automatic security updates
configure_security_updates_enabled: true

# Security update configuration (sensitive data in vault.yml)
configure_security_updates_gmail_enabled: true
configure_security_updates_gmail_smtp_server: "smtp.gmail.com"
configure_security_updates_gmail_smtp_port: "465"

# =============================================================================
# CONTAINER SECURITY
# =============================================================================

# Enable container security scanning
configure_container_security_enabled: true

# Trivy vulnerability scanner settings
configure_container_security_trivy_enabled: true
configure_container_security_scan_schedule: "0 2 * * *"  # Daily at 2 AM
configure_container_security_critical_threshold: 0
configure_container_security_high_threshold: 5

# =============================================================================
# FAIL2BAN CONFIGURATION
# =============================================================================

# Enable intrusion prevention
configure_fail2ban_enabled: true

# SSH protection settings
configure_fail2ban_ban_time: 3600      # 1 hour
configure_fail2ban_find_time: 600      # 10 minutes
configure_fail2ban_max_retry: 3        # 3 attempts
